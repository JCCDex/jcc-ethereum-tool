#!/usr/bin/env node

const { Command } = require("commander");
const packageJson = require("../package.json");
const { importToKeystore, processCreateWallet, saveKeystore, getWalletFromKeystore } = require("./jcc-ethereum-keystore");
const fs = require("fs");
const BigNumber = require("bignumber.js");
const utils = require("jcc-ethereum-utils");
const eth_ens_namehash = require('eth-ens-namehash');
const { create2ContractAddress } = require("web3-eth-contract");

const program = new Command();

function getBaseHome() {
  return (process.env.HOME || process.env.USERPROFILE) + "/.jcc-ethereum-tool";
}

// 设置版本号
program
  .name(packageJson.name)
  .description(packageJson.description)
  .version(packageJson.version, '-v, --version', 'Output the current version');

program
  .option("--config <config file>", "specified config file, defaut is " + getBaseHome() + "/config.json")
  .option("--keystore <keystore file>", "keystore file path")
  .option("--password <keystore file password>", "keystore password")
  .option("--server <ETH node address>", "node rpc address")
  .option("--nonce <number>", "specified nonce")
  .option("--gas_price <number>", "specified gasPrice, default 10000000000")
  .option("--gas_limit <number>", "specified gas limit, default 50000")
  .option("--maxFeePerGas <number>", "specified gasPrice")
  .option("--maxPriorityFeePerGas <number>", "specified gasPrice");

// program.option("--erc20 <string>", "erc20 address");
// program.option("--erc721 <string>", "erc721 address");
// program.option("--fingate <string>", "fingate address");

const sleep = (milliseconds) => {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
};

function customReplacer(key, value) {
  if (typeof value === "bigint") {
    return value.toString();
  } else {
    return value;
  }
}

async function rpc_getTraceTransaction(hash) {
  return new Promise((resolve, reject) => {
    inst.getWeb3().currentProvider.send({
      id: 1,
      jsonrpc: "2.0",
      method: "debug_traceTransaction",
      params: [hash, {"tracer": "callTracer"}]
    }, (err, res) => {
      if (err) {
        return reject(err);
      }
      if (res.error) {
        return reject(res.error);
      }
      return resolve(res.result);
    });
  })
}

async function getGasPrice() {
  if (!_options.gasPrice) {
    _options.gasPrice = await inst.getGasPrice();
  }
  return _options.gasPrice;
}

async function getFeeData() {
  let feeData = {};
  if (!_options.maxFeePerGas || !_options.maxPriorityFeePerGas) {
    feeData = await inst.getFeeData();
    _options.maxFeePerGas = _options.maxFeePerGas || feeData.maxFeePerGas;
    _options.maxPriorityFeePerGas = _options.maxPriorityFeePerGas || feeData.maxPriorityFeePerGas;
  }
  return {
    maxFeePerGas: _options.maxFeePerGas,
    maxPriorityFeePerGas: _options.maxPriorityFeePerGas
  }
}

async function getNonce(address) {
  if (!options.nonce) {
    let n = await inst.getNonce(address);
    return n;
  }
  return options.nonce;
}

async function getTx(dest, amount, nonce, calldata) {
  let latestBlock = await inst.getBlock("latest");
  const baseFeePerGas = latestBlock.baseFeePerGas;
  let tx;
  if(baseFeePerGas) {
    let feeData = await getFeeData();
    tx = inst.get1559Tx(_options.wallet.address, dest, nonce, _options.gasLimit, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas, amount.toString(), calldata);
  } else {
    let gasPrice = await getGasPrice();
    tx = inst.getTx(_options.wallet.address, dest, nonce, _options.gasLimit, gasPrice, amount.toString(), calldata);
  }
  return tx;
}

function getFile(filename) {
  if (!fs.existsSync(filename)) {
    filename = __dirname + "/" + filename;
    if (!fs.existsSync(filename)) {
      console.log("can not find ", filename);
      process.exit();
    }
  }
  try {
    return JSON.parse(fs.readFileSync(filename, "utf-8"));
  } catch (e) {
    console.log("get file ", filename, "error", e);
    process.exit(-1);
  }
}

program
  .command("wallet_create")
  .description("Create new ETH wallet")
  .option('--save_wallet', 'save wallet to keystore file when create')
  .action(({ save_wallet }) => {
    if (!save_wallet) {
      processCreateWallet();
    }
    saveKeystore();
  });

program
  .command("import_private_to_keystore")
  .description("import private key to keystore file")
  .action(() => {
    importToKeystore();
  })

program
  .command("block")
  .description("get block info by number or latest")
  .argument('<block>', 'block number or latest')
  .action(async (block) => {
    await sleep(0);
    let info = await inst.getBlock(block);
    console.log("block:", JSON.stringify(info, customReplacer, 2));
  })

program
  .command("transaction")
  .description("get transaction by hash")
  .argument('<hash>', 'transaction hash')
  .action(async (hash) => {
    await sleep(0);
    let info = await inst.getTransaction(hash);
    console.log("transaction:", JSON.stringify(info, customReplacer, 2));
  })

program
  .command("traceTransaction")
  .description("trace transactions by transaction hash")
  .argument('<hash>', 'transaction hash')
  .action(async (hash) => {
    await sleep(0);
    const info = await rpc_getTraceTransaction(hash).catch((err) => {
      console.error(err);
      process.exit(-1);
    })
    console.log("trace transaction", JSON.stringify(info, customReplacer, 2));
  })

program
  .command("receipt")
  .description("get transaction receipt by hash")
  .argument('<hash>', 'transaction hash')
  .action(async (hash) => {
    await sleep(0);
    let info = await inst.getTransactionReceipt(hash);
    console.log("transaction receipt:", JSON.stringify(info, customReplacer, 2));
  })

program
  .command("getNonce")
  .description("get current nonce")
  .action(async () => {
    await sleep(0);
    const wallet = await getWallet();
    const nonce = await inst.getNonce(wallet.address);
    console.log("current nonce:", nonce);
  })

program
  .command("balance")
  .description("get balance of address")
  .argument('<address>', 'address')
  .action(async (address) => {
    await sleep(0);
    let balance = await inst.getBalance(address);
    console.log("balance:", balance);
  })

program
  .command("transfer")
  .description("transfer token to Destination address: source address specified by keystore or config")
  .argument('<Destination address>', 'Destination address')
  .argument('<amount>', 'transfer amount')
  .action(async (dist, amount) => {
    await sleep(0);
    const wallet = await getWallet();
    const nonce = await getNonce(wallet.address);
    const tx = await getTx(dist, amount, nonce, "");
    console.log("tx:", tx, "raw:", await inst.signTransaction(tx, wallet.secret));
  
    let hash = await inst.sendSignedTransaction(await inst.signTransaction(tx, wallet.secret));
    console.log("transfer hash:", hash);
    process.exit(0);
  })

// program.option("--transferheco <Destination address>", "destination address, source address specified by keystore or config");

const EVAL_OPERATIONS = ["web3", "BigNumber", "namehash"];

const shouldEval = (arg) => {
  return EVAL_OPERATIONS.some((operation) => arg.includes(operation));
}

function handleArgs(args) {
  // 该变量是为用户在外部传入chain3的函数调用 eval(getMethodCall()) 时用的
  let web3 = inst._web3
  let namehash = eth_ens_namehash.hash

  return args.map((arg) => {
    try {
      if ((arg.startsWith("{") && arg.endsWith("}")) || (arg.startsWith("[") && arg.endsWith("]"))) {
        return JSON.parse(arg);
      }
      return shouldEval(arg) ? eval(arg) : arg;
    } catch (error) {
      return arg;
    }
  })
}

program
  .command("abi")
  .description("abi definition: used for interacting with the contract")
  .argument('<abi file>', 'abi file')
  .argument("<contract address>", "the contract address after deploymentcontract address")
  .argument("<method name>", "the method name for invoking the contract")
  .argument("[args...]", "the args for invoking the contract")
  .action(async (abiFile, contract, method, args) => {
    await sleep(0);
    const wallet = await getWallet();
    let _json = getFile(abiFile);
    let abi = _json.abi;
    let sc = new utils.smartContract();
    sc.init(contract, inst, abi);

    // 确定接口类型
    const abiItem = abi.find((item) => item.name == method);
    if (!abiItem) {
      console.log("Can not find method", method, "in abi definition.");
      process.exit();
    }
    args = handleArgs(args); // 处理参数

    const { stateMutability } = abiItem;
    if (stateMutability === "view" || stateMutability === "pure") {
      const byte = await sc.callABI(method, ...args);
      console.log("return value:", byte);
    } else {
      const calldata = await sc.callABI(method, ...args);
      let amount = "0";
      if (amount) {
        amount = amount + "";
      }
      // if (!!nonce) {
      //   _options.nonce = nonce;
      // } else {
      //   _options.nonce = await getNonce(wallet.address);
      // }
      _options.nonce = await getNonce(wallet.address);

      let tx = await getTx(contract, amount, _options.nonce, calldata);
      console.log("tx:", tx);
  
      let signed = await inst.signTransaction(tx, wallet.secret);
      console.log("signed:", signed);
  
      const hash = await inst.sendSignedTransaction(signed);
      console.log("hash:", hash);
  
      process.exit(0);
    }
  })

function isHexadecimalWithPrefix(str) {
  const regex = /^0x[0-9a-fA-F]+$/i;
  return regex.test(str);
}

async function encodeCallData(compiledJson, method, args) {
  let _json = getFile(compiledJson);
  let abi = _json.abi;
  let bytecode = _json.bytecode;
  if (!abi) {
    console.log("Can not find abi in file", compiledJson, ", Please check it!");
    process.exit();
  }
  let sc = new utils.smartContract();
  sc.init(null, inst, abi);
  args = handleArgs(args); // 处理参数
  if (method == "constructor") {
    let initCode = "";
    if(typeof bytecode == "object") {
      if(typeof bytecode.object == "string") {
        initCode = bytecode.object;
      }else{
        throw new Error("Invalid bytecode format");
      }
    }else if (typeof bytecode == "string"){
      initCode = bytecode;
    }else{
      throw new Error("Invalid bytecode format");
    }
    if (!initCode.startsWith("0x")) {
      initCode = "0x" + initCode;
    }
    if (!isHexadecimalWithPrefix(initCode)) {
      throw new Error("The generated initcode is not hexadecimal, please check the bytecode.");
    }
    let constructor = abi.find((item) => item.type == "constructor");
    if (!constructor) {
      return initCode;
    }
    if (constructor.inputs.length > 0 && args.length == 0) {
      console.log("miss --parameter arguments");
      process.exit();
    }
    return sc._contract.deploy({ data: initCode, arguments: args }).encodeABI();
  }
  return sc._contract.methods[method].apply(null, args).encodeABI();
}

program
  .command("deploy")
  .description("Deploy the contract using create")
  .argument('<contract json file>', 'the compiled contract file')
  .argument("[args...]", "the args for invoking the contract")
  .action(async (jsonFile, args) => {
    await sleep(0);
    const wallet = await getWallet();
    const calldata = await encodeCallData(jsonFile, "constructor", args);
    let nonce = await getNonce(wallet.address);
    let tx = await getTx(null, 0, nonce, calldata);
    let signed = await inst.signTransaction(tx, _options.wallet.secret);
    let hash;
    try {
      hash = await inst.sendSignedTransaction(signed);
    } catch (e) {
      console.log(e);
      process.exit(-1);
    }
    console.log("create contract transaction hash:", hash);
    console.log("waiting for contract address.......");
    for (var i = 0; i < 20; i++) {
      await sleep(2000);
      let receipt = await inst.getTransactionReceipt(hash);
      if (receipt && receipt.contractAddress) {
        console.log("create contract", receipt.status ? "success" : "fail", "\ncontract address:", receipt.contractAddress);
        process.exit(0);
        return;
      }
    }
  
    console.log("can not get contract address, try get transaction receipt later");
  })

program
  .command("encodeCallData")
  .description("encode call data for contract")
  .argument('<abi file>', 'abi file')
  .argument("<method name>", "the method name for invoking the contract")
  .argument("[args...]", "the args for invoking the contract")
  .action(async (abiFile, method, args) => {
    await sleep(0);
    const calldata = await encodeCallData(abiFile, method, args);
    console.log("calldata:", calldata);
  })

program
  .command("generateCreate2Address")
  .description("generate the create2 contract address through the compiled contract file")
  .argument('<contract json file>', 'the compiled contract file')
  .argument("<sender address>", "The address for calling create2, since the EOA address cannot be directly called, should be the contract address for implementing create2")
  .argument("<salt>", "the salt for create2")
  .argument("[args...]", "the args for invoking the contract")
  .action(async (jsonFile, sender, salt, args) => {
    await sleep(0);
    console.log("send address:", sender);
    salt = inst._web3.utils.encodePacked({
      type: "bytes32",
      value: salt
    })
    console.log("salt:", salt);

    args = handleArgs(args); // 处理参数
    let _json = getFile(jsonFile);
    if (!_json.bytecode) {
      console.log("can not get byte code");
      process.exit(-1);
    }
    let abi = _json.abi;
    let constructor = abi.find((item) => item.type == "constructor");
    if (!constructor) {
      console.log("Can not find constructor in file", jsonFile, ", Please check it!");
    }
    if (constructor.inputs.length > 0 && abi.length == 0) {
      console.log("miss --parameter arguments");
      process.exit();
    }
    let initCode = await encodeCallData(jsonFile, "constructor", args);
    console.log("initCode:", initCode);
  
    const create2Address = create2ContractAddress(sender, salt, initCode);
    console.log("create2 contract address:", create2Address);
  })

program
  .command("deploy2")
  .description("Deploy the contract using create2")
  .argument('<abi file>', 'the contract abi file of create2 has been deployed and implemented')
  .argument("<contract address>", "the deployed contract address corresponding to the abi file")
  .argument("<method name>", "the name of the method that implements create2")
  .argument("[args...]", "the args for invoking the contract")
  .action(async (abiFile, contractAddress, method, args) => {
    await sleep(0);
    const wallet = await getWallet();
    const calldata = await encodeCallData(abiFile, method, args);
    let nonce = await getNonce(wallet.address);
    let tx = await getTx(contractAddress, 0, nonce, calldata);
    let signed = await inst.signTransaction(tx, wallet.secret);
    let hash;
    try {
      hash = await inst.sendSignedTransaction(signed);
    } catch (e) {
      console.log(e);
      process.exit(-1);
    }
  
    console.log("create contract transaction hash:", hash);
    console.log("waiting for contract address.......");
    for (var i = 0; i < 20; i++) {
      await sleep(2000);
      try {
        let trace = await rpc_getTraceTransaction(hash);
        if (trace) {
          const calls = trace.calls;
          create2_call = calls.find((call) => call.type.toLowerCase() == "create2");
          const contractAddr = create2_call.to;
          console.log("create contract", trace ? "success" : "fail", "\ncontract address:", contractAddr);
          process.exit(0);
        }
      } catch (error) {
        if (error.code == -32601) {
          break;
        } 
      }
    }
    console.log("If you can't get the contract address, you can try tracking the transaction or checking it in the browser in the future");
  })

program
  .command("getAbiOfFile")
  .description("Extract the abi field from the contract file and put it into abi.json. The contract file must contain the abi field.")
  .argument('<contractFile file>', 'Contract file, requiring the file to contain the abi field.')
  .action(async (contractFile) => {
    try {
      let _json = getFile(contractFile);
      if (_json.abi) {
        let abi = _json.abi;
        fs.writeFileSync("./abi.json", JSON.stringify(abi, null, 2));
        console.log("abi.json has been generated successfully.");
      }else{
        console.log("The contract file does not contain the abi field.");
      }
    } catch (error) {
      throw error;
    }
  })

program
  .command("getBytecodeOfFile")
  .description("Extract the bytecode field from the contract file and put it into bytecode.json. The contract file must contain the bytecode field.")
  .argument('<contractFile file>', 'Contract file, requiring the file to contain the bytecode field.')
  .action(async (contractFile) => {
    try {
      let _json = getFile(contractFile);
      if (_json.bytecode) {
        let bytecode = _json.bytecode;
        fs.writeFileSync("./bytecode.json", JSON.stringify(bytecode, null, 2));
        console.log("bytecode.json has been generated successfully.");
      }else{
        console.log("The contract file does not contain the bytecode field.");
      }
    } catch (error) {
      throw error;
    }
  })


// 解析命令行参数
program.parse(process.argv);

const options = program.opts();
// 初始化配置信息
let _options = {};

async function getConfig() {
  // 获取配置文件
  let _config = options.config;

  // 如果文件位置没有通过参数传递
  if (!!!_config) {
    _config = getBaseHome() + "/config.json";
  }
  if (_config.indexOf("/") == -1 && _config.indexOf("\\") == -1) {
    if (_config.indexOf("json") == -1) {
      _config = getBaseHome() + "/config." + _config + ".json";
    }
  }
  if (!fs.existsSync(_config)) {
    console.log("can not get", _config, "file, create it manula!");
    process.exit();
  }

  // 读取文件
  try {
    _options = Object.assign(_options, JSON.parse(fs.readFileSync(_config, "utf-8")));
    if (!_options.gasLimit) {
      _options.gasLimit = 50000;
    }
    if (!_options.gasPrice) {
      // 10G
      _options.gasPrice = 10000000000;
    }
  } catch (e) {
    console.log("Parse config file fail, check and correct it", e);
    process.exit();
  }

  if (!isNaN(Number(options.gas_limit))) {
    _options.gasLimit = Number(options.gas_limit);
  }
  if (!isNaN(Number(options.gas_price))) {
    _options.gasPrice = Number(options.gas_price);
  }
  if (!isNaN(Number(options.maxFeePerGas))) {
    _options.maxFeePerGas = Number(options.maxFeePerGas);
  }
  if (!isNaN(Number(options.maxPriorityFeePerGas))) {
    _options.maxPriorityFeePerGas = Number(options.maxPriorityFeePerGas);
  }
  if (!!options.server) {
    console.log("use specified server:", options.server);
    _options.server = options.server;
  }
}

getConfig();

async function getWallet() {
  if (options.keystore) {
    let keystorePath = options.keystore;
    // 兼容windows下的路径
    if (keystorePath.indexOf("/") == -1 && keystorePath.indexOf("\\") == -1) {
      keystorePath = getBaseHome() + "/" + keystorePath;
    }
    _options.wallet = await getWalletFromKeystore(keystorePath, options.password);
  }
  return _options.wallet;
}

// 初始化连接
let inst = new utils.Ethereum(_options.server);
inst.initWeb3();
