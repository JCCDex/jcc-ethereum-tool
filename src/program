#!/usr/bin/env node

const { Command } = require('commander');
const { Ethereum, smartContract } = require("jcc-ethereum-utils");
const fs = require("fs");
const path = require("path");
const { toWei } = require("web3-utils");
const BigNumber = require("bignumber.js");
const {
  importToKeystore,
  processCreateWallet,
  saveKeystore,
  getWalletFromKeystore
} = require("./jcc-ethereum-keystore");
const program = new Command();

const getBaseHome = () => {
  return path.join(__dirname);
}

program.option("--config <config file>", "specified config file, defaut is " + getBaseHome() + "/config.json");
program.option("--keystore <keystore file>", "keystore file path");
program.option("--password <keystore file password>", "keystore password");
program.option("--gas_price <number>", "specified gasPrice, default 10000000000");
program.option("--gas_limit <number>", "specified gas limit, default 50000");
program.option("--maxFeePerGas <number>", "specified maxFeePerGas");
program.option("--maxPriorityFeePerGas <number>", "specified maxPriorityFeePerGas");
program.option("--server <Evm node rpc>", "rpc node");

let _options = {};

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const absoultePath = (file) => {
  const relativePath = path.relative(__dirname, file);
  return path.resolve(__dirname, relativePath);
}

program
  .command("block")
  .description("获取区块信息")
  .argument('<block>', '区块')
  .action(async (block) => {
    await sleep(0); // 将该任务插入宏任务
    console.log("block: ", block)
    const blockInfo = await ethereumInst.getBlock(block);
    console.log("blockInfo: ", blockInfo)
  });


program
  .command("import_private_to_keystore")
  .description("导入私钥生成keystore")
  .action(() => {
    importToKeystore();
  });

program.
  command("getNonce")
  .description("获取nonce")
  .action(async () => {
    await sleep(0);
    const wallet = await getWallet();
    console.log("wallet: ", wallet);
    const nonce = await ethereumInst.getNonce(wallet?.address);
    console.log("nonce: ", nonce);
  });

program
  .command("wallet_create")
  .description("创建钱包")
  .option('--save_wallet', '是否保存钱包')
  .action(({ save_wallet }) => {
    if (!save_wallet) {
      processCreateWallet();
    }
    saveKeystore();
  });

const EVAL_OPERATIONS = ["toWei", "BigNumber"];

// 判断参数是否需要执行eval
const shouldEval = (arg) => {
  return EVAL_OPERATIONS.some((operation) => arg.includes(operation));
}

const evalArgs = (args) => {
  return args.map((arg) => {
    return shouldEval(arg) ? eval(arg) : arg;
  });
}

program
  .command("abi")
  .description("abi操作")
  .argument('<abi>', 'abi文件')
  .addHelpText('after', `Examples:
    获取合约decimals: jcc-ethereum-tool abi <abi> <contractAddress> decimals
    获取token余额: jcc-ethereum-tool abi <abi> <contractAddress> balanceOf <address>`)

  .argument('<address>', '合约地址')
  .argument('<method>', 'abi方法')
  .argument('[args...]', 'abi方法参数')
  .action(async (abi, address, method, args) => {
    await sleep(0);
    const abiPath = absoultePath(abi);
    const abiFile = fs.readFileSync(abiPath, "utf-8");
    const contract = new smartContract();
    contract.init(address, ethereumInst, JSON.parse(abiFile));
    const res = await contract.callABI(method, ...evalArgs(args));
    console.log(`abi ${method} result: `, res);
  });

program.parse(process.argv);

const options = program.opts();

const getWallet = async () => {
  const keystore = options.keystore;
  if (keystore) {
    const file = absoultePath(keystore);
    const wallet = await getWalletFromKeystore(file, options.password);
    return wallet;
  }
  return _options.wallet;
}

const getConfig = () => {
  let config = options.config;
  if (config) {
    config = absoultePath(config);
  } else {
    config = path.join(__dirname, "config.json");
  }
  if (!fs.existsSync(config)) {
    console.log("can not get", config, "file, create it manula!");
    process.exit();
  }
  const data = fs.readFileSync(config, "utf-8");
  const opts = JSON.parse(data);
  if (!opts.gasLimit) {
    opts.gasLimit = options.gas_limit || 50000;
  }
  if (!opts.gasPrice) {
    opts.gasPrice = options.gas_price || 10000000000;
  }
  if (options.maxFeePerGas) {
    opts.maxFeePerGas = options.maxFeePerGas;
  }
  if (options.maxPriorityFeePerGas) {
    opts.maxPriorityFeePerGas = options.maxPriorityFeePerGas;
  }
  if (options.server) {
    opts.server = options.server;
  }

  return opts;
}


_options = getConfig();

const ethereumInst = new Ethereum(_options.server);
ethereumInst.initWeb3();
